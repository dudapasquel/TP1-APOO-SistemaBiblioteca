"""
Diagrama UML do Sistema de Biblioteca
Versão completa com funcionalidades futuras

@startuml Sistema_Biblioteca_UML

' Configurações do diagrama
!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 10
skinparam packageStyle rectangle

' ========== MODELOS PRINCIPAIS ==========

package "Models" {
    
    class Usuario {
        - id: int
        - nome: str
        - email: str
        - senha: str (MD5)
        - tipo_usuario: str
        - matricula: str
        - curso: str
        - departamento: str
        - ativo: bool
        - data_cadastro: datetime
        - data_atualizacao: datetime
        
        + __init__(nome, email, senha, tipo_usuario, ...)
        + validar(): tuple[bool, str]
        + verificar_senha(senha: str): bool
        + alterar_senha(nova_senha: str): void
        + salvar(): tuple[bool, str]
        + excluir(): tuple[bool, str]
        + to_dict(): dict
        + from_dict(data: dict): Usuario
        
        ' Métodos estáticos
        + {static} autenticar(email, senha): tuple[bool, Usuario, str]
        + {static} listar_todos(limite, incluir_inativos): list[Usuario]
        + {static} buscar_por_email(email): Usuario
        + {static} buscar_por_id(id): Usuario
        
        ' Métodos privados
        - _criptografar_senha(senha): str
        - _eh_senha_criptografada(senha): bool
        - _inserir(db): tuple[bool, str]
        - _atualizar(db): tuple[bool, str]
        - _email_existe(db, email): bool
        - _existe_por_id(db, id): bool
        - _buscar_ultimo_id(db): int
    }
    
    class Livro {
        - id: int
        - nome: str
        - autor: str
        - isbn: str
        - genero: str
        - data_cadastro: datetime
        - data_atualizacao: datetime
        - ativo: bool
        
        + __init__(nome, autor, isbn, genero, ...)
        + validar(): tuple[bool, str]
        + salvar(): tuple[bool, str]
        + excluir(): tuple[bool, str]
        + reativar(): tuple[bool, str]
        + deletar(): tuple[bool, str]
        + pode_ser_deletado(): tuple[bool, str]
        + deletar_com_verificacao(): tuple[bool, str]
        + to_dict(): dict
        + from_dict(data: dict): Livro
        
        ' Métodos estáticos
        + {static} listar_todos(limite, incluir_inativos): list[Livro]
        + {static} buscar_por_isbn(isbn): Livro
        + {static} buscar_por_id(id): Livro
        
        ' Métodos privados
        - _inserir(db): tuple[bool, str]
        - _atualizar(db): tuple[bool, str]
        - _isbn_existe(db, isbn): bool
        - _existe_por_id(db, id): bool
        - _buscar_ultimo_id(db): int
        + {static} _from_db_row(row): Livro
    }
    
    class Avaliacao {
        - id: int
        - livro_id: int
        - usuario_id: int
        - nota: int (1-5)
        - comentario: str
        - data_avaliacao: datetime
        - ativa: bool
        
        + __init__(livro_id, usuario_id, nota, comentario, ...)
        + validar(): tuple[bool, str]
        + salvar(): tuple[bool, str]
        + excluir(): tuple[bool, str]
        
        ' Métodos estáticos
        + {static} listar_por_livro(livro_id): list[Avaliacao]
        + {static} calcular_media_livro(livro_id): float
        + {static} _from_db_row(row): Avaliacao
        
        ' Métodos privados
        - _usuario_ja_avaliou(db): bool
        - _buscar_ultimo_id(db): int
    }
    
    enum TipoNotificacao {
        EMPRESTIMO
        DEVOLUCAO
        RESERVA
        MULTA
        SISTEMA
        PROMOCAO
    }
    
    enum StatusNotificacao {
        NAO_LIDA
        LIDA
        ARQUIVADA
    }
    
    class Notificacao {
        - id: int
        - usuario_id: int
        - tipo: TipoNotificacao
        - titulo: str
        - mensagem: str
        - status: StatusNotificacao
        - data_criacao: datetime
        - data_leitura: datetime
        - ativa: bool
        - livro_id: int
        
        + __init__(usuario_id, tipo, titulo, mensagem, ...)
        + validar(): tuple[bool, str]
        + salvar(): tuple[bool, str]
        + marcar_como_lida(): tuple[bool, str]
        + arquivar(): tuple[bool, str]
        + excluir(): tuple[bool, str]
        
        ' Métodos estáticos
        + {static} listar_por_usuario(usuario_id, apenas_nao_lidas): list[Notificacao]
        + {static} contar_nao_lidas(usuario_id): int
        + {static} criar_notificacao_sistema(usuario_id, titulo, mensagem, livro_id): Notificacao
        + {static} _from_db_row(row): Notificacao
        
        ' Métodos privados
        - _buscar_ultimo_id(db): int
    }
}

' ========== FUNCIONALIDADES FUTURAS ==========

package "Models Futuros" {
    
    enum StatusBiblioteca {
        ABERTA
        FECHADA
        MANUTENCAO
    }
    
    class Biblioteca {
        - id: int
        - nome: str
        - endereco: str
        - telefone: str
        - email: str
        
        + __init__(nome, endereco, telefone, email)
        + validar_dados(): tuple[bool, str]
        + salvar(): tuple[bool, str]
        
        + {static} listar_todas(): list[Biblioteca]
        + {static} buscar_por_id(id): Biblioteca
        + {static} buscar_por_nome(nome): Biblioteca
    }
    
    enum StatusEmprestimo {
        ATIVO
        DEVOLVIDO
        ATRASADO
        RENOVADO
        CANCELADO
    }
    
    enum TipoEmprestimo {
        NORMAL
        RESERVA
        RENOVACAO
    }
    
    class Emprestimo {
        - id: int
        - usuario_id: int
        - livro_id: int
        - biblioteca_id: int
        - data_emprestimo: datetime
        - data_prevista_devolucao: datetime
        - data_devolucao: datetime
        - status: StatusEmprestimo
        - tipo: TipoEmprestimo
        - valor_multa: float
        - dias_emprestimo: int
        - renovacoes: int
        - max_renovacoes: int
        - observacoes: str
        
        + __init__(usuario_id, livro_id, biblioteca_id, dias_emprestimo, tipo, max_renovacoes, observacoes)
        + validar_dados(): tuple[bool, str]
        + esta_em_atraso(): bool
        + dias_atraso(): int
        + calcular_multa(valor_diario): float
        + atualizar_status(): void
        + pode_renovar(): tuple[bool, str]
        + renovar(dias_adicionais): tuple[bool, str]
        + devolver(observacoes_devolucao): tuple[bool, str]
        + cancelar(motivo): tuple[bool, str]
        + salvar(): tuple[bool, str]
        + obter_dias_restantes(): int
        
        + {static} listar_todos(limite, incluir_devolvidos): list[Emprestimo]
        + {static} buscar_por_usuario(usuario_id, apenas_ativos): list[Emprestimo]
        + {static} buscar_por_livro(livro_id): list[Emprestimo]
        + {static} buscar_atrasados(): list[Emprestimo]
        + {static} buscar_por_id(emprestimo_id): Emprestimo
        + {static} estatisticas_biblioteca(biblioteca_id): dict
    }
    
    class Reserva {
        - id: int
        - livro_id: int
        - usuario_id: int
        - data_reserva: datetime
        - data_expiracao: datetime
        - status: str
        - ativa: bool
        
        + __init__(livro_id, usuario_id, ...)
        + cancelar(): tuple[bool, str]
        + confirmar(): tuple[bool, str]
        + esta_expirada(): bool
        
        + {static} listar_por_usuario(usuario_id): list[Reserva]
        + {static} verificar_disponibilidade(livro_id): bool
    }
    
    class Categoria {
        - id: int
        - nome: str
        - descricao: str
        - ativa: bool
        
        + __init__(nome, descricao)
        + salvar(): tuple[bool, str]
        + excluir(): tuple[bool, str]
        
        + {static} listar_todas(): list[Categoria]
    }
    
    class Autor {
        - id: int
        - nome: str
        - biografia: str
        - data_nascimento: date
        - nacionalidade: str
        - ativo: bool
        
        + __init__(nome, biografia, ...)
        + salvar(): tuple[bool, str]
        + excluir(): tuple[bool, str]
        
        + {static} listar_todos(): list[Autor]
        + {static} buscar_por_nome(nome): list[Autor]
    }
}

' ========== INFRAESTRUTURA ==========

package "Database" {
    class DatabaseConnection {
        - connection_string: str
        - connection: object
        
        + __init__()
        + connect(): bool
        + disconnect(): void
        + execute_query(query, params): list
        + execute_non_query(query, params): bool
        + test_connection(): bool
    }
}

' ========== INTERFACE DE USUÁRIO ==========

package "Frontend" {
    
    class SistemaBibliotecaCompleto {
        - root: CTk
        - usuario_atual: Usuario
        - tipo_usuario_selecionado: str
        - livro_selecionado: Livro
        - linha_selecionada: CTkFrame
        - incluir_inativos: bool
        - livros_atuais: list[Livro]
        
        + __init__()
        + executar(): void
        + criar_tela_inicial(): void
        + ir_para_login(tipo_usuario): void
        + fazer_login(): void
        + mostrar_interface_principal(): void
        + carregar_livros_completo(): void
        + adicionar_livro_completo(): void
        + editar_livro_completo(): void
        + janela_livro(modo, livro): void
        + selecionar_livro_visual(livro, frame): void
        + mostrar_detalhes_livro(): void
        + toggle_status_livro(): void
        + atualizar_botao_status(): void
        + inativar_livro(): void
        + reativar_livro(): void
        + buscar_por_isbn(): void
        + obter_livros_simulados(): list
    }
    
    ' Futuras interfaces especializadas
    class InterfaceBibliotecario {
        + gerenciar_usuarios(): void
        + gerar_relatorios(): void
        + configurar_sistema(): void
    }
    
    class InterfaceAluno {
        + solicitar_emprestimo(): void
        + visualizar_historico(): void
        + avaliar_livro(): void
    }
    
    class InterfaceProfessor {
        + fazer_reserva_prioritaria(): void
        + sugerir_aquisicao(): void
        + criar_lista_leitura(): void
    }
}

' ========== RELACIONAMENTOS ==========

' Relacionamentos principais
Usuario ||--o{ Avaliacao : "1..* faz"
Livro ||--o{ Avaliacao : "1..* recebe"
Usuario ||--o{ Notificacao : "1..* recebe"
Livro ||--o{ Notificacao : "0..* relaciona"

' Relacionamentos futuros
Usuario ||--o{ Emprestimo : "1..* faz"
Livro ||--o{ Emprestimo : "1..* é emprestado"
Biblioteca ||--o{ Emprestimo : "1..* processa"
Usuario ||--o{ Reserva : "1..* faz"
Livro ||--o{ Reserva : "1..* é reservado"
Categoria ||--o{ Livro : "1..* categoriza"
Autor ||--o{ Livro : "1..* escreve"

' Composições de enums
Notificacao --> TipoNotificacao
Notificacao --> StatusNotificacao
Biblioteca --> StatusBiblioteca
Emprestimo --> StatusEmprestimo
Emprestimo --> TipoEmprestimo

' Dependências de infraestrutura
Usuario ..> DatabaseConnection : "usa"
Livro ..> DatabaseConnection : "usa"
Avaliacao ..> DatabaseConnection : "usa"
Notificacao ..> DatabaseConnection : "usa"

' Dependências de interface
SistemaBibliotecaCompleto ..> Usuario : "usa"
SistemaBibliotecaCompleto ..> Livro : "usa"
InterfaceBibliotecario --|> SistemaBibliotecaCompleto
InterfaceAluno --|> SistemaBibliotecaCompleto
InterfaceProfessor --|> SistemaBibliotecaCompleto

' ========== NOTAS E COMENTÁRIOS ==========

note top of Usuario : "Classe principal para autenticação\ne gerenciamento de usuários.\nSupporta 3 tipos: Bibliotecario,\nAluno e Professor"

note top of Livro : "Modelo principal do sistema.\nTodos os métodos CRUD foram movidos\ndo LivroService. Inclui métodos\npara deleção permanente"

note top of Avaliacao : "Funcionalidade futura:\nPermite que usuários avaliem\nlivros de 1 a 5 estrelas"

note top of Notificacao : "Sistema de notificações\npara comunicação com usuários.\nSuporta diferentes tipos e status"

note top of DatabaseConnection : "Camada de abstração\npara acesso ao SQL Server.\nUsada por todos os models"

note top of SistemaBibliotecaCompleto : "Interface principal unificada.\nArquitetura simplificada:\nmétodos movidos para models"

note bottom of "Models Futuros" : "Funcionalidades implementadas:\n- Classe Biblioteca completa\n- Sistema de empréstimos robusto\n- Controle de status e multas\n\nFuncionalidades planejadas:\n- Reservas de livros\n- Categorização avançada\n- Gestão de autores"

note top of Biblioteca : "Versão simplificada da classe Biblioteca.\nMantém apenas os atributos essenciais:\nid, nome, endereço, telefone e email"

note top of Emprestimo : "Sistema simplificado de empréstimos.\nRemovidos campos de funcionários e\ndatas de controle, mantendo funcionalidades\nessenciais de empréstimo e devolução"

@enduml
"""